AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Deployment Template for Tapestry's Cloud Resources
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs16.x
    Timeout: 25
    MemorySize: 512

Resources:
  TapestryVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: "Name"
          Value: "TapestryVPC" 
    
  TapestryVPCSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: TapestryVPC
    Properties: 
      AvailabilityZone: ca-central-1b
      CidrBlock: 10.0.1.0/24
      EnableDns64: false
      VpcId: !Ref TapestryVPC
      Tags:
        - Key: "Name"
          Value: "TapestrySubnet1" 

  TapestryVPCSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: TapestryVPC
    Properties: 
      AvailabilityZone: ca-central-1a
      CidrBlock: 10.0.0.0/24
      EnableDns64: false
      VpcId: !Ref TapestryVPC
      Tags:
        - Key: "Name"
          Value: "TapestrySubnet2" 

  RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: TapestryVPC
    Properties:
      VpcId: !Ref TapestryVPC
      Tags:
        - Key: "Name"
          Value: "TapestryVPCRouteTable" 

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Name"
          Value: "TapestryVPCInternet" 

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - TapestryVPC
      - InternetGateway
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref TapestryVPC

  Route1:
    Type: AWS::EC2::Route
    DependsOn:
      - InternetGateway
      - RouteTable
      - GatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  AssociationSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
      - RouteTable
      - TapestryVPCSubnet1
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref TapestryVPCSubnet1

  AssociationSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
      - RouteTable
      - TapestryVPCSubnet2
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref TapestryVPCSubnet2

  NeptuneSubnetGroup:
    Type: AWS::Neptune::DBSubnetGroup
    DependsOn:
      - TapestryVPCSubnet1
      - TapestryVPCSubnet2
    Properties:
      DBSubnetGroupDescription: Subnet group for Tapestry's Neptune Database
      DBSubnetGroupName: neptune-subnet-group
      SubnetIds:
        - !Ref TapestryVPCSubnet1
        - !Ref TapestryVPCSubnet2

  NeptuneDBCluster:
    Type: AWS::Neptune::DBCluster
    DependsOn:
      - NeptuneSubnetGroup
    Properties:
      AvailabilityZones: 
        - ca-central-1a
        - ca-central-1b
      DBClusterIdentifier: tapestry-neptune-cluster
      DBSubnetGroupName: neptune-subnet-group
      EngineVersion: 1.0.5.1
      Port: 8182

  NeptuneDBInstance:
    Type: AWS::Neptune::DBInstance
    DependsOn: 
      - NeptuneDBCluster
      - NeptuneSubnetGroup
    Properties:
       AvailabilityZone: ca-central-1a
       DBClusterIdentifier: tapestry-neptune-cluster
       DBInstanceClass: db.t3.medium
       DBInstanceIdentifier: tapestry-neptune-instance
       DBSubnetGroupName: neptune-subnet-group 

  # Security Key Generator

  # Role

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
         - Effect: Allow
           Principal:
             Service:
              - lambda.amazonaws.com
           Action:
            - sts:AssumeRole
      Policies:
         -
           PolicyName: allowLambdaLogging
           PolicyDocument:
             Version: "2012-10-17"
             Statement:
               -
                 Effect: "Allow"
                 Action:
                   - "logs:*"
                 Resource: "*"

  # Function

  KeyGenerator:
    Type: AWS::Serverless::Function
    DependsOn: 
      - LambdaExecutionRole
    Properties:
      InlineCode: |
          const response = require("cfn-response");
          const randomString = (length, chars) => {
              var result = '';
              for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];
              return result;
          }
          exports.handler = (event, context) =>{
            const str = randomString(event['ResourceProperties']['Length'], '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');
            const responseData = {RandomString: str};
            response.send(event, context, response.SUCCESS, responseData);
          };
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: generateRandomToken
      Layers:
        - !Ref LambdaLayer
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt LambdaExecutionRole.Arn
      

  # Custom Resource For Security Key

  SecurityString:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - KeyGenerator
    Properties:
      Length: 16
      ServiceToken: !GetAtt KeyGenerator.Arn


  # Lambda Layer

  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./layer
      LayerName: LambdaLayerTapestry

  # Lambda Authorizer

  Authorizer:
    Type: AWS::Serverless::Function
    DependsOn:
      - SecurityString
    Properties:
      CodeUri: lambdas/authorization/
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: authTapestry
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt TapestryVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref TapestryVPCSubnet1
          - !Ref TapestryVPCSubnet2
      Environment:
        Variables:
          SECURITY_KEY: !GetAtt SecurityString.RandomString

  # Role for invoking the authorizer

  AuthorizerInvokeRole:
    Type: AWS::IAM::Role
    DependsOn:
     - Authorizer
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: InvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: !GetAtt Authorizer.Arn

  # HTTP API 

  NeptuneApi:
    Type: AWS::Serverless::HttpApi
    DependsOn:
      - AuthorizerInvokeRole
    Properties:
      Auth:
        Authorizers:
          LambdaAuthorizer:
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: true
            FunctionArn: !GetAtt Authorizer.Arn
            FunctionInvokeRole: !GetAtt AuthorizerInvokeRole.Arn
            Identity:
              Headers:
                - authorization
        DefaultAuthorizer: LambdaAuthorizer


     
  # Lambda Functions

  GetTapestryNodes:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - TapestryVPC
      - TapestryVPCSubnet1
      - TapestryVPCSubnet2
      - NeptuneDBInstance
    Properties:
      CodeUri: lambdas/getTapestryNodes/
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: getTapestryNodesTapestry
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt TapestryVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref TapestryVPCSubnet1
          - !Ref TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT: !GetAtt NeptuneDBInstance.Endpoint
          USE_IAM: false
      Layers:
        - !Ref LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref NeptuneApi
            Path: /getTapestryNodes
            Method: get

  AddNode:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - TapestryVPC
      - TapestryVPCSubnet1
      - TapestryVPCSubnet2
      - NeptuneDBInstance
    Properties:
      CodeUri: lambdas/addNode/
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: addNodeTapestry
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt TapestryVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref TapestryVPCSubnet1
          - !Ref TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT: !GetAtt NeptuneDBInstance.Endpoint
          USE_IAM: false
      Layers:
        - !Ref LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref NeptuneApi
            Path: /addNode
            Method: post

  AddEdge:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - TapestryVPC
      - TapestryVPCSubnet1
      - TapestryVPCSubnet2
      - NeptuneDBInstance
    Properties:
      CodeUri: lambdas/addEdge/
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: addEdgeTapestry
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt TapestryVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref TapestryVPCSubnet1
          - !Ref TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT: !GetAtt NeptuneDBInstance.Endpoint
          USE_IAM: false
      Layers:
        - !Ref LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref NeptuneApi
            Path: /addEdge
            Method: post

  AddTapestry:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - TapestryVPC
      - TapestryVPCSubnet1
      - TapestryVPCSubnet2
      - NeptuneDBInstance
    Properties:
      CodeUri: lambdas/addTapestry/
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: addTapestryTapestry
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt TapestryVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref TapestryVPCSubnet1
          - !Ref TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT: !GetAtt NeptuneDBInstance.Endpoint
          USE_IAM: false
      Layers:
        - !Ref LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref NeptuneApi
            Path: /addTapestry
            Method: post

  AddUser:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - TapestryVPC
      - TapestryVPCSubnet1
      - TapestryVPCSubnet2
      - NeptuneDBInstance
    Properties:
      CodeUri: lambdas/addUser/
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: addUserTapestry
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt TapestryVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref TapestryVPCSubnet1
          - !Ref TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT: !GetAtt NeptuneDBInstance.Endpoint
          USE_IAM: false
      Layers:
        - !Ref LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref NeptuneApi
            Path: /addUser
            Method: post

  DeleteEdge:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - TapestryVPC
      - TapestryVPCSubnet1
      - TapestryVPCSubnet2
      - NeptuneDBInstance
    Properties:
      CodeUri: lambdas/deleteEdge/
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: deleteEdgeTapestry
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt TapestryVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref TapestryVPCSubnet1
          - !Ref TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT: !GetAtt NeptuneDBInstance.Endpoint
          USE_IAM: false
      Layers:
        - !Ref LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref NeptuneApi
            Path: /deleteEdge
            Method: delete

  DeleteVertex:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - TapestryVPC
      - TapestryVPCSubnet1
      - TapestryVPCSubnet2
      - NeptuneDBInstance
    Properties:
      CodeUri: lambdas/deleteVertex/
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: deleteVertexTapestry
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt TapestryVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref TapestryVPCSubnet1
          - !Ref TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT: !GetAtt NeptuneDBInstance.Endpoint
          USE_IAM: false
      Layers:
        - !Ref LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref NeptuneApi
            Path: /deleteVertex
            Method: delete

  IsChildNodeOfTapestry:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - TapestryVPC
      - TapestryVPCSubnet1
      - TapestryVPCSubnet2
      - NeptuneDBInstance
    Properties:
      CodeUri: lambdas/isChildNodeOfTapestry/
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: isChildNodeOfTapestryTapestry
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt TapestryVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref TapestryVPCSubnet1
          - !Ref TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT: !GetAtt NeptuneDBInstance.Endpoint
          USE_IAM: false
      Layers:
        - !Ref LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref NeptuneApi
            Path: /isChildNodeOfTapestry
            Method: get

  ReverseEdge:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - TapestryVPC
      - TapestryVPCSubnet1
      - TapestryVPCSubnet2
      - NeptuneDBInstance
    Properties:
      CodeUri: lambdas/reverseEdge/
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: reverseEdgeTapestry
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt TapestryVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref TapestryVPCSubnet1
          - !Ref TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT: !GetAtt NeptuneDBInstance.Endpoint
          USE_IAM: false
      Layers:
        - !Ref LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref NeptuneApi
            Path: /reverseEdge
            Method: post

  UpdateNodeData:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - TapestryVPC
      - TapestryVPCSubnet1
      - TapestryVPCSubnet2
      - NeptuneDBInstance
    Properties:
      CodeUri: lambdas/updateNodeData/
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: updateNodeDataTapestry
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt TapestryVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref TapestryVPCSubnet1
          - !Ref TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT: !GetAtt NeptuneDBInstance.Endpoint
          USE_IAM: false
      Layers:
        - !Ref LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref NeptuneApi
            Path: /updateNodeData
            Method: post

  UpdateUserProgress:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - TapestryVPC
      - TapestryVPCSubnet1
      - TapestryVPCSubnet2
      - NeptuneDBInstance
    Properties:
      CodeUri: lambdas/updateUserProgress/
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: updateUserProgressTapestry
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt TapestryVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref TapestryVPCSubnet1
          - !Ref TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT: !GetAtt NeptuneDBInstance.Endpoint
          USE_IAM: false
      Layers:
        - !Ref LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref NeptuneApi
            Path: /updateUserProgress
            Method: post


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  #HelloWorldApi:
  #  Description: "API Gateway endpoint URL for Prod stage for Hello World function"
  #  Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  #HelloWorldFunction:
  #  Description: "Hello World Lambda Function ARN"
  #  Value: !GetAtt HelloWorldFunction.Arn
  #HelloWorldFunctionIamRole:
  #  Description: "Implicit IAM Role created for Hello World function"
  #  Value: !GetAtt HelloWorldFunctionRole.Arn
  TapestryDepApi:
    Description: API Gateway URL. Put in Tapestry's plugin settings.
    Value: !Sub 
      - "https://${api}.execute-api.${AWS::Region}.amazonaws.com/"
      - api: !Ref NeptuneApi

  SecurityKeyOutput:
    Description: Security Key for the APIs. Put in Tapestry's plugin settings.
    Value: !GetAtt SecurityString.RandomString


